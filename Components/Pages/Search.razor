@page "/search"
@using CW1Preyanshu.Components.Model
@inject UserService UserService

<h1 class="page-title">Search Transactions</h1>

<!-- Filter Section -->
<div class="filter-container card">
    <h2>Filter Transactions</h2>
    <div class="filter-fields">
        <!-- Filter by Type -->
        <label for="typeFilter" class="filter-label">Filter by Type:</label>
        <select id="typeFilter" @bind="filterType" class="input-field">
            <option value="">All</option>
            <option value="Credit">Credit</option>
            <option value="Debit">Debit</option>
        </select>

        <!-- Filter by Tag -->
        <label for="tagFilter" class="filter-label">Filter by Tag:</label>
        <input id="tagFilter" @bind="filterTag" class="input-field" placeholder="Enter tag" />

        <!-- Filter by Date Range -->
        <label for="dateRange" class="filter-label">Filter by Date Range:</label>
        <div class="date-range-container">
            <InputDate @bind-Value="filterStartDate" class="input-field date-range-input" placeholder="Start Date" />
            <span class="to-text">to</span>
            <InputDate @bind-Value="filterEndDate" class="input-field date-range-input" placeholder="End Date" />
        </div>
    </div>

    <!-- Button to Apply Filter -->
    <button @onclick="ApplyFilters" class="btn btn-primary">Apply Filter</button>
</div>

<!-- Filter or No Results Message -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <p class="filter-message">@successMessage</p>
}

<!-- Transaction Table Section -->
<div class="table-container card">
    <h2>Transaction History</h2>
    @if (FilteredTransactionsList.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Type</th>
                    <th>Date</th>
                    <th>Amount</th>
                    <th>Tags</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in FilteredTransactionsList)
                {
                    <tr>
                        <td>@(transaction.Credit > 0 ? "Credit" : "Debit")</td>
                        <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                        <td>@(transaction.Credit > 0 ? transaction.Credit : -transaction.Credit)</td>
                        <td>@string.Join(", ", transaction.Tags)</td>
                        <td>@transaction.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="no-results-message">No transactions found with the current filter.</p>
    }
</div>

@code {
    private AppData Data;
    private string filterTag = "";
    private string filterType = "";
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private List<Transactions> FilteredTransactionsList = new List<Transactions>();
    private string successMessage = "";

    protected override async Task OnInitializedAsync()
    {
        Data = UserService.LoadData();
        await ApplyFilters();
    }

    private async Task ApplyFilters()
    {
        // Start with all transactions
        var filteredTransactions = Data.Transactions.AsQueryable();

        // Apply Type Filter
        if (!string.IsNullOrEmpty(filterType))
        {
            filteredTransactions = filterType == "Credit"
                ? filteredTransactions.Where(t => t.Credit > 0)
                : filteredTransactions.Where(t => t.Credit <= 0);
        }

        // Apply Tag Filter
        if (!string.IsNullOrEmpty(filterTag))
        {
            filteredTransactions = filteredTransactions.Where(t => t.Tags.Any(tag => tag.Contains(filterTag, StringComparison.OrdinalIgnoreCase)));
        }

        // Apply Date Range Filter
        if (filterStartDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date >= filterStartDate.Value);
        }

        if (filterEndDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date <= filterEndDate.Value);
        }

        // Update the filtered list
        FilteredTransactionsList = filteredTransactions.ToList();

        // Set success message
        successMessage = FilteredTransactionsList.Any()
            ? $"Found {FilteredTransactionsList.Count} transaction(s) matching your filter."
            : "No transactions found with the current filter.";

        // Ensure the UI is updated after filtering
        StateHasChanged();
    }
}

<style>
    /* Global Styles */
    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f4f7fc;
        color: #333;
        margin: 0;
        padding: 0;
    }

    .page-title {
        text-align: center;
        font-size: 2.5em;
        color: #2c3e50;
        margin-bottom: 30px;
    }

    /* Card Styling */
    .card {
        background-color: #ffffff;
        border-radius: 15px;
        padding: 30px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        margin-bottom: 30px;
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .card:hover {
            transform: translateY(-10px);
            box-shadow: 0 16px 24px rgba(0, 0, 0, 0.2);
        }

        /* Section Titles */
        .card h2 {
            color: #34495e;
            font-size: 1.8em;
            margin-bottom: 20px;
            font-weight: 600;
        }

    /* Table Styles */
    .table-container {
        max-width: 100%;
        overflow-x: auto;
    }

    .table {
        width: 100%;
        border-collapse: collapse;
        margin-bottom: 30px;
        font-size: 1.1em;
    }

        .table th,
        .table td {
            padding: 15px;
            text-align: left;
            border: 1px solid #ddd;
        }

        .table th {
            background-color: #2c3e50;
            color: white;
            font-weight: 600;
        }

        .table tr:hover {
            background-color: #f1f1f1;
        }

        .table td {
            font-size: 1.1em;
            color: #555;
        }

    /* Filter Section */
    .filter-container {
        margin-bottom: 30px;
        background-color: #ffffff;
        border-radius: 12px;
        box-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
        padding: 30px;
    }

    .filter-fields {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-bottom: 20px;
    }

    .filter-label {
        font-weight: 600;
        color: #34495e;
    }

    .input-field {
        padding: 12px;
        font-size: 1.1em;
        border-radius: 8px;
        border: 1px solid #ccc;
        width: 100%;
        background-color: #f9f9f9;
        transition: border-color 0.3s ease;
    }

        .input-field:focus {
            border-color: #3498db;
            outline: none;
        }

    /* Date Range Styles */
    .date-range-container {
        display: flex;
        gap: 10px;
        align-items: center;
    }

    .date-range-input {
        width: 150px;
        padding: 12px;
        font-size: 1.1em;
    }

    .to-text {
        font-size: 1.1em;
        color: #7f8c8d;
    }

    /* Button Styles */
    .btn {
        padding: 12px 25px;
        background-color: #3498db;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1.2em;
        transition: background-color 0.3s ease, transform 0.2s ease;
        width: 100%;
        margin-top: 10px;
    }

        .btn:hover {
            background-color: #2980b9;
            transform: translateY(-2px);
        }

    /* Success/No Results Messages */
    .filter-message {
        font-size: 1.2em;
        color: #27ae60;
        text-align: center;
    }

    .no-results-message {
        font-size: 1.2em;
        color: #e74c3c;
        text-align: center;
    }

    /* Responsive Styles */
     (max-width: 768px) {
        .filter-fields

    {
        grid-template-columns: 1fr;
    }

    .date-range-container {
        flex-direction: column;
        gap: 5px;
    }

    .date-range-input {
        width: 100%;
    }

    .btn {
        width: 100%;
        padding: 12px;
    }

    }
</style>
