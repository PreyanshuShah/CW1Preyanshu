@page "/search"
@using CW1Preyanshu.Components.Model
@inject UserService UserService
@inject CurrencyService CurrencyService
@inject IJSRuntime JSRuntime

<h1 class="page-title">Search Transactions</h1>

<!-- Filter Section -->
<div class="filter-container card">
    <h2>Filter Transactions</h2>
    <div class="filter-fields">
        <!-- Filter by Type -->
        <label for="typeFilter" class="filter-label">Filter by Type:</label>
        <select id="typeFilter" @bind="filterType" class="input-field">
            <option value="">All</option>
            <option value="Credit">Credit</option>
            <option value="Debit">Debit</option>
        </select>

        <!-- Filter by Tag -->
        <label for="tagFilter" class="filter-label">Filter by Tag:</label>
        <input id="tagFilter" @bind="filterTag" class="input-field" placeholder="Enter tag" />

        <!-- Filter by Date Range -->
        <label for="dateRange" class="filter-label">Filter by Date Range:</label>
        <div class="date-range-container">
            <InputDate @bind-Value="filterStartDate" class="input-field date-range-input" placeholder="Start Date" />
            <span class="to-text">to</span>
            <InputDate @bind-Value="filterEndDate" class="input-field date-range-input" placeholder="End Date" />
        </div>
    </div>

    <!-- Sorting Order Section -->
    <div class="sorting-order-container">
        <h3>Sort by Date:</h3>
        <select id="sortDate" @bind="sortOrderDate" class="input-field">
            <option value="asc">Ascending</option>
            <option value="desc">Descending</option>
        </select>
    </div>

    <!-- Buttons -->
    <div class="filter-buttons">
        <button @onclick="ApplyFilters" class="btn btn-primary">Apply Filter</button>
        <button @onclick="DownloadFilteredDataExcel" class="btn btn-info">Download as Excel</button>
    </div>
</div>

<!-- Filter or No Results Message -->
@if (!string.IsNullOrEmpty(successMessage))
{
    <p class="filter-message">@successMessage</p>
}

<!-- Transaction Table Section -->
<div class="table-container card">
    <h2>Transaction History</h2>
    @if (FilteredTransactionsList.Any())
    {
        <table class="table table-striped">
            <thead>
                <tr>
                    <th @onclick="SortByDate">
                        Date
                        <button @onclick="ToggleSortOrderDate" class="sort-btn">@GetSortIndicator("Date")</button>
                    </th>
                    <th>Type</th>
                    <th>Amount</th>
                    <th>Tags</th>
                    <th>Description</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var transaction in FilteredTransactionsList)
                {
                    <tr>
                        <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                        <td>@(transaction.Credit > 0 ? "Credit" : "Debit")</td>
                        <td>@(transaction.Credit > 0 ? FormatCurrency(transaction.Credit) : FormatCurrency(-transaction.Credit))</td>
                        <td>@string.Join(", ", transaction.Tags)</td>
                        <td>@transaction.Description</td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <p class="no-results-message">No transactions found with the current filter.</p>
    }
</div>

<!-- Add CSS Styling -->
<style>
    /* Page Title */
    .page-title {
        font-size: 2rem;
        color: #2c3e50;
        margin-bottom: 20px;
    }

    /* Filter Container */
    .filter-container {
        margin-bottom: 30px;
        padding: 20px;
        border-radius: 8px;
        background-color: #f9f9f9;
    }

    .filter-label {
        font-size: 1rem;
        color: #34495e;
        margin-bottom: 8px;
        display: block;
    }

    .input-field {
        width: 100%;
        padding: 10px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
        border-radius: 4px;
    }

    .filter-buttons {
        display: flex;
        gap: 10px;
        justify-content: flex-start;
    }

    .btn {
        padding: 10px 20px;
        font-size: 1rem;
        cursor: pointer;
        border: none;
        border-radius: 4px;
        color: white;
    }

    .btn-primary {
        background-color: #007bff;
    }

    .btn-info {
        background-color: #17a2b8;
    }

    .filter-message {
        font-size: 1rem;
        color: #28a745;
        margin-top: 10px;
    }

    /* Transaction Table */
    .table-container {
        margin-top: 20px;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    table {
        width: 100%;
        border-collapse: collapse;
        text-align: left;
    }

    th, td {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    th {
        background-color: #f1f1f1;
        color: #34495e;
    }

    td {
        color: #2c3e50;
    }

    .no-results-message {
        color: #e74c3c;
        font-size: 1rem;
    }

    .to-text {
        font-size: 1.2rem;
        margin: 0 5px;
    }

    .sort-btn {
        background-color: transparent;
        border: none;
        cursor: pointer;
        color: #007bff;
        font-size: 1rem;
    }

        .sort-btn:hover {
            color: #0056b3;
        }

    /* Sorting Order Section */
    .sorting-order-container {
        margin-bottom: 20px;
    }

        .sorting-order-container select {
            padding: 10px;
            margin-bottom: 15px;
            border: 1px solid #ccc;
            border-radius: 4px;
            font-size: 1rem;
        }
</style>

@code {
    private AppData Data;
    private string filterTag = "";
    private string filterType = "";
    private DateTime? filterStartDate;
    private DateTime? filterEndDate;
    private List<Transactions> FilteredTransactionsList = new List<Transactions>();
    private string successMessage = "";
    private bool sortAscendingDate = true;
    private string sortOrderDate = "asc";

    protected override async Task OnInitializedAsync()
    {
        Data = UserService.LoadData();
        await ApplyFilters();
    }

    private async Task ApplyFilters()
    {
        var filteredTransactions = Data.Transactions.AsQueryable();

        if (!string.IsNullOrEmpty(filterType))
        {
            filteredTransactions = filterType == "Credit"
                ? filteredTransactions.Where(t => t.Credit > 0)
                : filteredTransactions.Where(t => t.Credit <= 0);
        }

        if (!string.IsNullOrEmpty(filterTag))
        {
            filteredTransactions = filteredTransactions.Where(t => t.Tags.Any(tag => tag.Contains(filterTag, StringComparison.OrdinalIgnoreCase)));
        }

        if (filterStartDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date >= filterStartDate.Value);
        }

        if (filterEndDate.HasValue)
        {
            filteredTransactions = filteredTransactions.Where(t => t.Date <= filterEndDate.Value);
        }

        FilteredTransactionsList = filteredTransactions.ToList();
        successMessage = FilteredTransactionsList.Any()
            ? $"Found {FilteredTransactionsList.Count} transaction(s) matching your filter."
            : "No transactions found with the current filter.";

        StateHasChanged();
    }

    private void SortByDate()
    {
        FilteredTransactionsList = sortOrderDate == "asc"
            ? FilteredTransactionsList.OrderBy(t => t.Date).ToList()
            : FilteredTransactionsList.OrderByDescending(t => t.Date).ToList();

        StateHasChanged();
    }

    private void ToggleSortOrderDate()
    {
        sortOrderDate = sortOrderDate == "asc" ? "desc" : "asc";
        SortByDate();
    }

    private string GetSortIndicator(string column)
    {
        if (column == "Date")
        {
            return sortOrderDate == "asc" ? "↑" : "↓";
        }
        return "";
    }

    private async Task DownloadFilteredDataExcel()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("generateExcel", FilteredTransactionsList);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error generating Excel: {ex.Message}");
        }
    }

    private string FormatCurrency(decimal amount)
    {
        return $"{CurrencyService.GetPreferredCurrency()} {amount:F2}";
    }
}
