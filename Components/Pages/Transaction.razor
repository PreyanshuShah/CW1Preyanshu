@page "/transaction"
@using CW1Preyanshu.Components.Model
@inject UserService UserService
@inject CurrencyService CurrencyService

<h1 class="text-center mb-4">User Transactions</h1>

<!-- Table to Display Transactions -->
<div class="table-responsive">
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Transaction ID</th>
                <th>Main Balance</th>
                <th>Debit</th>
                <th>Credit</th>
                <th>Date</th>
                <th>Description</th>
                <th>Tags</th> <!-- Display Tags -->
                <th>Category</th> <!-- Display Category -->
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in Data.Transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@FormatCurrency(Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit))</td>
                    <td>@FormatCurrency(transaction.Debit)</td>
                    <td>@FormatCurrency(transaction.Credit)</td>
                    <td>@transaction.Date.ToString("MM/dd/yyyy")</td>
                    <td>@transaction.Description</td>
                    <td>@string.Join(", ", transaction.Tags)</td> <!-- Display Tags -->
                    <td>@transaction.Category</td> <!-- Display Category -->
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Add New Transaction Form -->
<h2 class="text-center mt-5">Add New Transaction</h2>
<EditForm Model="newTransaction" OnValidSubmit="HandleTransactionSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (!string.IsNullOrEmpty(balanceError))
    {
        <div class="alert alert-danger">@balanceError</div>
    }

    <div class="form-row">
        <div class="form-group col-md-6">
            <label for="debit">Debit</label>
            <InputNumber id="debit" @bind-Value="newTransaction.Debit" class="form-control" placeholder="Enter Debit Amount" />
        </div>

        <div class="form-group col-md-6">
            <label for="credit">Credit</label>
            <InputNumber id="credit" @bind-Value="newTransaction.Credit" class="form-control" placeholder="Enter Credit Amount" />
        </div>
    </div>

    <div class="form-group">
        <label for="description">Description</label>
        <InputText id="description" @bind-Value="newTransaction.Description" class="form-control" placeholder="Enter a short description" />
    </div>

    <div class="form-group">
        <label for="tags">Tags</label> <!-- Tags Input -->
        <InputText id="tags" @bind-Value="newTransaction.TagsString" class="form-control" placeholder="Enter tags separated by commas" />
        <small class="form-text text-muted">You can enter your custom tags.</small>
    </div>

    <!-- Category Input -->
    <div class="form-group">
        <label for="category">Category</label>
        <InputText id="category" @bind-Value="newTransaction.Category" class="form-control" placeholder="Enter category" />
    </div>

    <div class="form-group text-center">
        <button type="submit" class="btn btn-success btn-lg">Add Transaction</button>
    </div>
</EditForm>

@code {
    private AppData Data;
    private Transactions newTransaction = new Transactions();
    private string balanceError;

    protected override void OnInitialized()
    {
        Data = UserService.LoadData(); // Load user data
        SetDefaultTags(); // Set default tags for the transaction
    }

    private void SetDefaultTags()
    {
        // Default tags to show in the Tags field (this will be shown if the user doesn't input any tags)
        newTransaction.TagsString = "Food, Entertainment, Travel"; // Default tags
    }

    private void HandleTransactionSubmit()
    {
        // Calculate the current main balance (credit - debit)
        decimal currentBalance = Data.Transactions.Sum(t => t.Credit) - Data.Transactions.Sum(t => t.Debit);

        // Check if the debit transaction is trying to exceed the balance
        if (newTransaction.Debit > currentBalance)
        {
            balanceError = "Insufficient balance to make this withdrawal.";
            return;  // Abort the transaction if the balance check fails
        }

        // If everything is valid, clear any existing error message
        balanceError = null;

        newTransaction.Id = Data.Transactions.Count + 1;
        newTransaction.Date = DateTime.Now;

        // Parse Tags String into List of Tags (custom tags can be added here)
        newTransaction.Tags = newTransaction.TagsString.Split(',').Select(t => t.Trim()).ToList();

        // Add new transaction to data
        Data.Transactions.Add(newTransaction);

        // Save data for the current user
        UserService.SaveData(Data);

        // Reset form after submitting
        newTransaction = new Transactions();
    }

    // Helper method to format currency based on selected currency from CurrencyService
    private string FormatCurrency(decimal amount)
    {
        string currencySymbol = CurrencyService.GetPreferredCurrency(); // Get the selected currency (NPR/USD/etc.)

        // Adjust the format depending on the currency (optional: you can add more specific formatting rules per currency)
        return $"{currencySymbol} {amount:F2}";
    }
}

<style>
    /* Global Styles */
    h1, h2 {
        color: #343a40;
        font-weight: 600;
        padding-bottom:10;
    }

    .table-responsive {
        margin-top: 20px;
    }

    .table {
        border-collapse: collapse;
        width: 100%;
    }

    .thead-dark {
        background-color: #343a40;
        color: white;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }

    .table-hover tbody tr:hover {
        background-color: #f1f1f1;
    }

    .table th, .table td {
        padding: 12px;
        text-align: left;
        border: 1px solid #dee2e6;
    }

    .form-row {
        margin-top: 15px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        font-size: 1.1rem;
    }

    .btn-lg {
        padding: 0.75rem 1.5rem;
        font-size: 1.25rem;
    }

    .btn-success {
        background-color: #28a745;
        border-color: #28a745;
    }

        .btn-success:hover {
            background-color: #218838;
            border-color: #1e7e34;
        }

    .text-center {
        text-align: center;
    }

    .mt-5 {
        margin-top: 3rem;
    }

    .mb-4 {
        margin-bottom: 1.5rem;
    }

    .table td {
        font-size: 1rem;
    }

    label {
        font-weight: 500;
    }

    .alert-danger {
        margin-top: 20px;
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    /* Additional styling for tags input */
    .form-text {
        font-size: 0.9rem;
        color: #6c757d;
    }
</style>
